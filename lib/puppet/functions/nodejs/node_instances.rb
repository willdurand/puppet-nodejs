# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'nodejs::node_instances') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    raise(Puppet::ParseError, 'node_instances(): too few arguments') if args.empty?

    Puppet::Parser::Functions.function(:evaluate_version)

    install           = args[1]
    normalize         = args[0].map do |n, h|
      if h.is_a?(Hash) && h.key?('source') && !h['source'].empty?
        hash           = {}
        actual_version = h['source']
      else
        evaluation_args = [install ? h['version'] : n]
        actual_version  = function_evaluate_version(evaluation_args)
        hash            = { 'version' => actual_version }
      end

      [
        install ? "nodejs-custom-instance-#{actual_version}" : "nodejs-uninstall-custom-#{actual_version}",
        install ? h.merge(hash) : hash
      ]
    end

    normalize.to_h
  
  end
end
