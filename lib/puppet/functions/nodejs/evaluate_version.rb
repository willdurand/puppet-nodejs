# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require_relative 'util/nodejs_functions'

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'nodejs::evaluate_version') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    raise(Puppet::ParseError, 'evaluate_version(): too few arguments') if args.empty?

    version = args[0]
    return get_latest_version if version == 'latest'
    return get_lts_version if version == 'lts'

    if version =~ /^(?:(v)?)[0-9]+\.[0-9]+\.[0-9]+/
      # if the version is matched, but contains no `v` as prefix, it will
      # be added automatically
      return 'v' + version if version =~ /^[^v](.*)/

      # no v prefix needed
      return version
    end

    return get_version_from_branch version if version =~ /^(?:(v)?)[0-9]+\.([0-9]+|x)$/

    raise Puppet::ParseError, 'evaluate_version(): version must be `lts`, `latest` or look like `x.x.x`'
  
  end
end
